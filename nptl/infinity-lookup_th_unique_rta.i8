/* Which thread is running on an LWP?
   Copyright (C) 2003-2015 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */


/* Given an lwpid_t identifying an LWP, return TD_OK and the
   descriptor of the thread running on it, or a non-TD_OK
   td_err_e code indicating the reason for failure and an
   undefined value that must be ignored.  The caller must
   ensure that __pthread_initialize_minimal has gotten far
   enough; see the comments in infinity_map_lwp2thr.i8 for
   specifics.  */

define libpthread::__lookup_th_unique returns td_err_e, ptr
	argument lwpid_t lwpid
	extern ps_getreg_f procservice::get_register
	extern ps_get_ta_f procservice::get_thread_area

		// stack 0: procservice::get_thread_area
		// stack 1: procservice::get_reg
		// stack 2: lwpid
	load lwpid
		// stack 0: lwpid
		// stack 1: procservice::get_thread_area
		// stack 2: procservice::get_reg
		// stack 3: lwpid
	rot
		// stack 0: procservice::get_thread_area
		// stack 1: procservice::get_reg
		// stack 2: lwpid
		// stack 3: lwpid
	rot
		// stack 0: procservice::get_reg
		// stack 1: lwpid
		// stack 2: procservice::get_thread_area
		// stack 3: lwpid
	load I8_TS_RTA_OFFSET
		// stack 0: I8_TS_RTA_OFFSET
		// stack 1: procservice::get_thread_area
		// stack 2: lwpid
		// stack 3: procservice::get_thread_area
		// stack 4: lwpid
	swap
		// stack 0: procservice::get_thread_area
		// stack 1: I8_TS_RTA_OFFSET
		// stack 2: lwpid
		// stack 3: procservice::get_thread_area
		// stack 4: lwpid
	load I8_TS_RTA_SIZE
		// stack 0: I8_TS_RTA_SIZE
		// stack 1: procservice::get_thread_area
		// stack 2: I8_TS_RTA_OFFSET
		// stack 3: lwpid
		// stack 4: procservice::get_thread_area
		// stack 5: lwpid
	swap
		// stack 0: procservice::get_thread_area
		// stack 1: I8_TS_RTA_SIZE
		// stack 2: I8_TS_RTA_OFFSET
		// stack 3: lwpid
		// stack 4: procservice::get_thread_area
		// stack 5: lwpid
	call
		// stack 0: PS_OK (hopefully) or something else
		// stack 1: contents of register (hopefully) or junk
		// stack 2: procservice::get_thread_area
		// stack 3: lwpid
	load PS_OK
		// stack 0: PS_OK
		// stack 1: PS_OK (hopefully) or something else
		// stack 2: contents of register (hopefully) or junk
		// stack 3: procservice::get_thread_area
		// stack 4: lwpid
	bne get_register_failed
		// stack 0: contents of register
		// stack 1: procservice::get_thread_area
		// stack 2: lwpid
	cast 0 int
		// stack 0: I8_TS_RTA_SCALE
		// stack 1: contents of register
		// stack 2: procservice::get_thread_area
		// stack 3: lwpid
	load I8_TS_RTA_SCALE
		// stack 0: I8_TS_RTA_SCALE
		// stack 1: contents of register
		// stack 2: procservice::get_thread_area
		// stack 3: lwpid
	shr
		// stack 0: scaled contents of register
		// stack 1: procservice::get_thread_area
		// stack 2: lwpid
	swap
		// stack 0: procservice::get_thread_area
		// stack 1: scaled contents of register
		// stack 2: lwpid
	call
		// stack 0: PS_OK (hopefully) or something else
		// stack 1: the thing we want (hopefully) or junk
	load PS_OK
		// stack 0: PS_OK
		// stack 1: PS_OK (hopefully) or something else
		// stack 2: the thing we want (hopefully) or junk
	bne get_thread_area_failed
		// stack 0: the thing we want
	load TD_OK
		// stack 0: TD_OK
		// stack 1: the thing we want
	return

get_register_failed:
		// stack 0: junk
		// stack 1: procservice::get_thread_area
		// stack 2: lwpid
	load TD_ERR
		// stack 0: TD_OK
		// stack 1: junk
		// stack 2: procservice::get_thread_area
		// stack 3: lwpid
	return

get_thread_area_failed:
		// stack 0: junk
	load TD_ERR
		// stack 0: TD_ERR
		// stack 1: junk
	return
